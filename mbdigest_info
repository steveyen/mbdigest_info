#!/usr/bin/env ruby

def usage(msg=nil)
  print "mbdigest_info [options] <ns_server.log>\n"
  print "\n"
  print "  -h / --help\n"
  print "    Print this usage help message.\n"
  print "\n"
  print "  --html-prefix=<path/to/output-report>\n"
  print "    Required. Emit correlated analysis files in html format,\n"
  print "    which will be named with \"-PAGENUM.html\" suffixes appended.\n"
  print "    For example: path/to/output-report-0.html\n"
  print "\n"
  print "  --page_size=<num>\n"
  print "    Optional. Split the html into pages with this # of rows per page.\n"
  print "\n"
  print "  --max-entries=<num>\n"
  print "    Optional. Stop after processing this # of entries in the log.\n"
  print "\n"
  print "Example:\n"
  print "  ./mbdigest_info --html-prefix=out ns_server.log\n"
  print "\n"
  print msg + "\n" if msg

  exit(-1)
end

usage() if ARGV.include?('--help')
usage() if ARGV.include?('-h')

# --------------------------------------------------------

ns_server_log = ARGV.select {|x| !x.match(/^--/)}[0]
html_prefix   = (ARGV.select {|x| x =~ /^--html-prefix/}[-1] || "").split('=')[1]
page_size     = (ARGV.select {|x| x =~ /^--page-size/}[-1] || "=-1").split('=')[1].to_i
max_entries   = (ARGV.select {|x| x =~ /^--max-entries/}[-1] || "=-1").split('=')[1].to_i

usage("ERROR: Need a ns_server.log parameter.") unless ns_server_log
usage("ERROR: Need a --html-prefix parameter.") unless html_prefix

print "mbdigest_info #{ns_server_log}\n"
print "  --html-prefix=#{html_prefix}\n"
print "  --page-size=#{page_size}\n" if page_size > 0
print "  --max_entries=#{max_entries}\n" if max_entries > 0
print "\n"

# --------------------------------------------------------

def parse_ns_server_log_file(file, agg={}, opts={}, &block)
  File.open(file, 'rb') {|io| parse_ns_server_log_io(io, agg, opts, &block)}
end

def parse_ns_server_log_io(io, agg={}, opts={}, &block)
  line_max = opts[:max_lines] || -1
  line_prev = nil

  entry_max = opts[:max_entries] || -1
  entry_curr = []
  entry_delim = "===============================================================================\n"

  pids = agg[:pids] || {}
  lines = 0
  entries = 0

  pid = ymd = tms = nil

  while (line_max < 0 or lines < line_max) and
        (entry_max < 0 or entries < entry_max)
    line = io.gets("\n")
    break unless line

    if line == entry_delim
      # The first entry is strangely missing a timestamp.
      #
      if entries > 0
        # Record tne first entry for a pid.
        #
        if pid
          pids[pid][3] = pids[pid][3] || entry_curr[0..-2]
        end

        block.call(entries, entry_curr[0..-2])
      end

      # Example header...
      # "INFO REPORT  <5881.69.0>   ...spaces...   2011-06-05 22:01:05"
      #
      header = line_prev.split(' ')

      pid = header[2]
      ymd = header[-2]
      tms = header[-1]

      # An entry in pids looks like...
      #   ["#{ymd}:{tms}", pid, NumEntriesFromThisPid, FirstMessageFromThisPid]
      #
      pids[pid] = (pids[pid] || [ymd +":" + tms, pid, 0])
      pids[pid][2] += 1

      entries = entries + 1
      entry_curr = [[ymd, tms, pid]]
    else
      entry_curr << line
    end

    lines = lines + 1
    line_prev = line
  end

  block.call(entries, entry_curr[0..-2])

  print "MAX LINES REACHED: #{lines}\n" if line_max >= 0 and lines >= line_max
  print "MAX ENTRIES REACHED: #{entries}\n" if entry_max >= 0 and entries >= entry_max

  return pids, entries, lines
end

def dot(i)
  if i.modulo(1000) == 0
    print(".")
    STDOUT.flush
  end
  return i + 1
end

def close_html(out)
  out.write("</table>\n")
  out.write("</body>\n")
  out.write("</html>\n")
  out.close
end

# --------------------------------------------------------

agg = { :pids => {} } # Some aggregate tracking during first pass.

print "processing #{ns_server_log}:\n"

i = 0

pids, entries, lines =
  parse_ns_server_log_file(ns_server_log,
                           agg=agg,
                           opts={ :max_entries => max_entries }) do |x, entry|
  i = dot(i)
end

print "\nDONE: #{lines} lines, #{entries} entries, #{pids.size} pids\n"

agg_pids = agg[:pids]
agg_pids_idx = {} # Key is pid, value is index of pid in sorted agg_pids list.
agg_pids.values.sort.each do |pid_info|
  pid = pid_info[1]
  agg_pids_idx[pid] = agg_pids_idx[pid] || (agg_pids_idx.size + 1)
end

# --------------------------------------------------------

prev_page = prev_ymd = prev_tms = prev_pid = out = row = nil

i = rows = page = 0

pids, entries, lines =
  parse_ns_server_log_file(ns_server_log,
                           agg={},
                           opts={ :max_entries => max_entries }) do |x, entry|
  page = (rows.to_f / page_size.to_f).floor if page_size > 0
  if page != prev_page
    close_html(out) if out

    html = "#{html_prefix}-#{page}.html"

    print "\nemitting #{html}:\n"

    out = File.open(html, 'w')

    out.write("<html>\n")
    out.write("<body>\n")

    out.write("<style>\n")
    out.write("  tr:hover { background-color: #eee; }\n")
    out.write("  table { font-size: 6px; border-collapse:collapse; }\n")
    out.write("  th { vertical-align: top; text-align: left; white-space: nowrap; }\n")
    out.write("  td { vertical-align: top; width: 1em; }\n")
    out.write("</style>\n")

    out.write("<h1>#{ns_server_log}</h1>\n")
    out.write("<table>\n")
    out.write("<tr><th>time</th><th colspan=\"#{agg_pids_idx.size}\">process events</th></tr>\n")
  end

  ymd, tms, pid = entry[0]
  if ymd and tms and pid
    if ymd != prev_ymd or tms != prev_tms
      if row
        out.write("<tr><th>#{prev_ymd} #{prev_tms}</th>\n<td>")
        out.write(row.join("</td><td>"))
        out.write("</td>\n</tr>\n")
      end

      rows = rows + 1

      row = Array.new(agg_pids_idx.size + 1, "")
    end

    row[agg_pids_idx[pid]] = (row[agg_pids_idx[pid]] || "") + " *"
  end

  prev_page = page
  prev_ymd  = ymd
  prev_tms  = tms
  prev_pid  = pid

  i = dot(i)
end

close_html(out) if out

print "\nDONE: #{lines} lines, #{entries} entries, #{pids.size} pids\n"


