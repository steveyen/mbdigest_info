#!/usr/bin/env ruby

def usage()
  print("mbdigest_info [options] ns_server.log ...\n")
  print("\n")
  print("  -h / --help\n")
  print("    Print this usage help message.\n")
  print("\n")
  print("  --html=<path/to/output-report.html>\n")
  print("    Emit a correlated analysis in html format.\n")
  print("\n")
  exit
end

usage() if ARGV.include?('--help')
usage() if ARGV.include?('-h')

# --------------------------------------------------------

html = (ARGV.select {|x| x =~ /^--html/}[-1] || "").split('=')[1]

ns_server_logs = ARGV.select {|x| !x.match(/^--/)}
ns_server_logs = ["ns_server.log"] if ns_server_logs.length <= 0

print "mbdigest_info #{ns_server_logs}\n"
print "\n"

# --------------------------------------------------------

def debug(msg)
end

def parse_ns_server_log_file(file, agg={}, opts={}, &block)
  print "parsing #{file}\n"
  File.open(file, 'rb') {|io| parse_ns_server_log_io(io, agg, opts, &block)}
end

def parse_ns_server_log_io(io, agg={}, opts={}, &block)
  opts ||= {}

  line_max = opts[:max_lines] || -1
  line_prev = nil

  entry_max = opts[:max_entries] || -1
  entry_curr = []
  entry_delim = "===============================================================================\n"

  pids = agg[:pids] || {}
  lines = 0
  entries = 0

  pid = ymd = tms = nil

  while (line_max < 0 or lines < line_max) and
        (entry_max < 0 or entries < entry_max)
    line = io.gets("\n")
    break unless line

    if line == entry_delim
      # The first entry is strangely missing a timestamp.
      #
      if entries > 0
        # Record tne first entry for a pid.
        #
        if pid
          pids[pid][3] = pids[pid][3] || entry_curr[0..-2]
        end

        block.call(entries, entry_curr[0..-2])
      end

      # Example header...
      # "INFO REPORT  <5881.69.0>                                    2011-06-05 22:01:05"
      #
      header = line_prev.split(' ')

      pid = header[2]
      ymd = header[-2]
      tms = header[-1]

      # An entry in pids looks like...
      #   ["#{ymd}:{tms}", pid, NumEntriesFromThisPid, FirstMessageFromThisPid]
      #
      pids[pid] = (pids[pid] || [ymd +":" + tms, pid, 0])
      pids[pid][2] += 1

      entries = entries + 1
      entry_curr = [[ymd, tms, pid]]
    else
      entry_curr << line
    end

    lines = lines + 1
    line_prev = line
  end

  block.call(entries, entry_curr[0..-2])

  print "MAX LINES REACHED: #{lines}\n" if line_max >= 0 and lines >= line_max
  print "MAX ENTRIES REACHED: #{entries}\n" if entry_max >= 0 and entries >= entry_max

  print "\nDONE: #{lines} lines, #{entries} entries, #{pids.size} pids\n"

  return pids, entries, lines
end

# --------------------------------------------------------

agg = { :pids => {} } # Some aggregate tracking during first pass.

ns_server_logs.each do |f|
  i = 0

  parse_ns_server_log_file(f, agg=agg) do |i, entry|
    ymd, tms, pid = entry[0]

    if i.modulo(1000) == 0
      print(".")
      STDOUT.flush
    end

    i = i + 1

    debug("#{ymd} #{tms} #{pid} ----- #{i}\n#{entry[1..-1]}\n")
  end
end

if html
  File.open(html, 'w') do |out|
    pids = agg[:pids]
    pids_idx = {}
    pids.values.sort.each do |pid_info|
      pid = pid_info[1]
      pids_idx[pid] = pids_idx[pid] || pids_idx.size
    end

    out.write("<html>\n")
    out.write("<body>\n")
    out.write("</body>\n")
    out.write("</html>\n")
  end
end


