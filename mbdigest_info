#!/usr/bin/env ruby

def usage(msg=nil)
  print "mbdigest_info [options] <ns_server.log>\n"
  print "\n"
  print "  -h / --help\n"
  print "    Print this usage help message.\n"
  print "\n"
  print "  --html-prefix=<path/to/output-report>\n"
  print "    Required. Emit correlated analysis files in html format,\n"
  print "    which will be named with \"-PAGENUM.html\" suffixes appended.\n"
  print "    For example: path/to/output-report-0.html\n"
  print "\n"
  print "  --page_size=<num>\n"
  print "    Optional. Split the html into pages with this # of rows per page.\n"
  print "\n"
  print "  --max-entries=<num>\n"
  print "    Optional. Stop after processing this # of entries in the log.\n"
  print "\n"
  print "  --verbose\n"
  print "    Optional. More verbose.\n"
  print "\n"
  print "Example:\n"
  print "  ./mbdigest_info --html-prefix=out ns_server.log\n"
  print "\n"
  print msg + "\n" if msg

  exit(-1)
end

usage() if ARGV.include?('--help')
usage() if ARGV.include?('-h')

# --------------------------------------------------------

ns_server_log = (ARGV.select {|x| !x.match(/^--/)})[0]
html_prefix   = (ARGV.select {|x| x =~ /^--html-prefix/}[-1] || "").split('=')[1]
page_size     = (ARGV.select {|x| x =~ /^--page-size/}[-1] || "=-1").split('=')[1].to_i
max_entries   = (ARGV.select {|x| x =~ /^--max-entries/}[-1] || "=-1").split('=')[1].to_i
verbose       = (ARGV.select {|x| x =~ /^--verbose/})[-1]

usage("ERROR: Need a ns_server.log parameter.") unless ns_server_log
usage("ERROR: Need a --html-prefix parameter.") unless html_prefix

print "mbdigest_info #{ns_server_log}\n"
print "  --html-prefix=#{html_prefix}\n"
print "  --page-size=#{page_size}\n" if page_size > 0
print "  --max_entries=#{max_entries}\n" if max_entries > 0
print "  --verbose\n" if verbose
print "\n"

# --------------------------------------------------------

# http://en.wikipedia.org/wiki/Arrow_(symbol)
#
# lower-case keys are direct symbols.
# upper-case keys (like Crash) are ns_server_log semantic driven.
#
symbols = {
  'airplane'   => '&#x2708;',
  'Supervisor' => '&#x2708;',
  'heavy_checkmark' => '&#x2714;',
  'ballot_x' => '&#x2717;',
  'heavy_ballot_x' => '&#x2718;',
  'Crash'          => '<b>&#x2718;</b>',
  'down_arrow' => '&#x21e9;',
  'white_star' => '&#x2729;',
  'circled_white_star' => '&#x272a;',
}

# --------------------------------------------------------

def parse_ns_server_log_file(file, agg={}, opts={}, &block)
  File.open(file, 'rb') {|io| parse_ns_server_log_io(io, agg, opts, &block)}
end

def parse_ns_server_log_io(io, agg={}, opts={}, &block)
  line_max = opts[:max_lines] || -1
  line_prev = nil

  entry_max = opts[:max_entries] || -1
  entry_curr = []
  entry_delim = "===============================================================================\n"

  pids = agg[:pids] || {}
  lines = 0
  entries = 0

  pid = ymd = tms = nil

  while (line_max < 0 or lines < line_max) and
        (entry_max < 0 or entries < entry_max)
    line = io.gets("\n")
    break unless line

    if line == entry_delim
      # The first entry is strangely missing a timestamp.
      #
      if entries > 0
        # Record tne first entry for a pid.
        #
        if pid
          pids[pid][3] = pids[pid][3] || entry_curr[0..-2]
        end

        block.call(entries, entry_curr[0..-2])
      end

      # Example header...
      # "INFO REPORT  <5881.69.0>   ...spaces...   2011-06-05 22:01:05"
      #
      header = line_prev.split(' ')

      kind   = header[0]
      report = header[1].split('-')[-1]
      pid    = header[2]
      ymd    = header[-2]
      tms    = header[-1]

      # An entry in pids looks like...
      #   ["#{ymd}:{tms}", pid, NumEntriesFromThisPid, FirstMessageFromThisPid]
      #
      pids[pid] = (pids[pid] || [ymd +":" + tms, pid, 0])
      pids[pid][2] += 1

      entries = entries + 1
      entry_curr = [[ymd, tms, pid, lines, kind, report]]
    else
      entry_curr << line
    end

    lines = lines + 1
    line_prev = line
  end

  block.call(entries, entry_curr[0..-2])

  print "MAX LINES REACHED: #{lines}\n" if line_max >= 0 and lines >= line_max
  print "MAX ENTRIES REACHED: #{entries}\n" if entry_max >= 0 and entries >= entry_max

  return pids, entries, lines
end

def dot(i)
  if i.modulo(1000) == 0
    print(".")
    STDOUT.flush
  end
  return i + 1
end

def close_html(out)
  out.write("</div>\n")
  out.write("</body>\n")
  out.write("</html>\n")
  out.close
end

# --------------------------------------------------------

rules = []

parse_ns_server_log_file("mbdigest_info.rule",
                         agg={}, opts={}) do |x, entry|
  ymd, tms, pid, lines, kind, report = entry[0]

  arr = entry[1..-1].join("\n").split("$$$")
  res = []
  arr.each_index do |i|
    res << arr[i] if i.modulo(2) == 1
  end

  rules << [report, res]
end

# --------------------------------------------------------

agg = { :pids => {} } # Some aggregate tracking during first pass.

print "processing #{ns_server_log}:\n"

i = 0

pids, entries, lines =
  parse_ns_server_log_file(ns_server_log,
                           agg=agg,
                           opts={ :max_entries => max_entries }) do |x, entry|
  ymd, tms, pid, lines, kind, report = entry[0]
  if ymd and tms and pid
    if verbose
      e = entry[1..-1].join("").
                       gsub(pid, "Pid").
                       gsub(/ns_1@([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)/, "ns_1@Ip")
      print "#{kind}\n#{e}\n"
    end
  end

  i = dot(i)
end

print "\nDONE: #{lines} lines, #{entries} entries, #{pids.size} pids\n"

agg_pids = agg[:pids]
agg_pids_idx = {} # Key is pid, value is index of pid in sorted agg_pids list.
agg_pids.values.sort.each do |pid_info|
  pid = pid_info[1]
  agg_pids_idx[pid] = agg_pids_idx[pid] || (agg_pids_idx.size + 1)
end

# --------------------------------------------------------

prev_page = prev_ymd = prev_tms = prev_pid = out = nil

i = rows = page = y = 0

pids, entries, lines =
  parse_ns_server_log_file(ns_server_log,
                           agg={},
                           opts={ :max_entries => max_entries }) do |x, entry|
  page = (rows.to_f / page_size.to_f).floor if page_size > 0
  if page != prev_page
    close_html(out) if out

    html = "#{html_prefix}-#{page}.html"

    print "\nemitting #{html}:\n"

    out = File.open(html, 'w')

    out.write("<html>\n")
    out.write("<body>\n")

    out.write("<style>\n")
    out.write("  .grid      { position: relative; font-size: 12px; }\n")
    out.write("  .row       { position: absolute; width: 100%; height: 2px;}\n")
    out.write("  .row       { position: absolute; }\n")
    out.write("  .row div   { position: absolute; white-space: nowrap; }\n")
    out.write("  .row:hover { background-color: #999; }\n")
    out.write("  b { color: red; }\n")
    out.write("</style>\n")

    out.write("<h1>#{ns_server_log}</h1>\n")

    out.write("<div class=\"grid\">\n")
    out.write("<div class=\"row\">\n")
  end

  ymd, tms, pid, kind, report = entry[0]
  if ymd and tms and pid
    if ymd != prev_ymd or tms != prev_tms
      out.write("</div>\n")
      out.write("<div class=\"row\" style=\"top:#{i * 8}px\">\n")
      out.write("<div>#{ymd} #{tms}</div>")

      y = 0
    end

    txt = entry.join("\n")
    val = '*'

    rules.each do |rule|
      symbol, patterns = rule

      if (patterns.count {|p| txt.match(p)}) == patterns.length
        val = symbols[symbol]
      end
    end

    out.write("<div style=\"top:#{y * 8}px; left:#{200 + agg_pids_idx[pid] * 10 }px\">#{val}</div>")

    y = y + 1
  end

  prev_page = page
  prev_ymd  = ymd
  prev_tms  = tms
  prev_pid  = pid

  i = dot(i)
end

close_html(out) if out

print "\nDONE: #{lines} lines, #{entries} entries, #{pids.size} pids\n"


